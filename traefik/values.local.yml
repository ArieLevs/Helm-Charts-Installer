## Default values for Traefik
image: traefik
imageTag: 1.6.5
## can switch the service type to NodePort if required
serviceType: LoadBalancer
# loadBalancerIP: ""
# loadBalancerSourceRanges: []
whiteListSourceRange: []
externalTrafficPolicy: Cluster
replicas: 1

podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 2

cpuRequest: 100m
memoryRequest: 20Mi
cpuLimit: 100m
memoryLimit: 30Mi
debug:
  enabled: false

deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  # type: RollingUpdate

nodeSelector: {}
  # key: value
affinity: {}
  # key: value
tolerations: []
# - key: "key"
#   operator: "Equal|Exists"
#   value: "value"
#   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
## Kubernetes ingress filters
# kubernetes:
  # endpoint:
  # namespaces:
  # - default
  # labelSelector:
  # ingressClass:
proxyProtocol:
  enabled: false
  # trustedIPs is required when enabled
  trustedIPs: []
  # - 10.0.0.0/8
ssl:
  enabled: true
  enforced: false
  insecureSkipVerify: true
  # https://docs.traefik.io/configuration/entrypoints/#specify-minimum-tls-version
  # tlsMinVersion: VersionTLS12
  defaultCert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMxRENDQWJ3Q0NRQ2xONEh1VitRQi9qQU5CZ2txaGtpRzl3MEJBUXNGQURBc01SUXdFZ1lEVlFRS0RBc3EKTG14dlkyRnNhRzl6ZERFVU1CSUdBMVVFQXd3TEtpNXNiMk5oYkdodmMzUXdIaGNOTVRnd09ERXhNVFV4T0RNNApXaGNOTWpnd09EQTRNVFV4T0RNNFdqQXNNUlF3RWdZRFZRUUtEQXNxTG14dlkyRnNhRzl6ZERFVU1CSUdBMVVFCkF3d0xLaTVzYjJOaGJHaHZjM1F3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2UKN2tERjBqRVp4eXk3WmdtNTBwbjloYmVaTnhvOUpKNDNhMHlQeDYyZkdXa2JlQWNIV0N1VTh5MDVHQktmWFBRdApja3ZUNmRnTU1DdjdPcU5UTHVhSlhyc3FiYWJyeHdGZHUrQTlBbENNdjhLUFhrdmNEbnduUlowVW1wNHBEVTUrCno1b09VT0orT3JpK2JqMXljeGRya0tQR3NPRW95eklVMWZWb2ZONHB2ZnJzTVFZbmd6QnVUdHQ1YzN1Q3c3MDUKSi9vRmlQa3dPd1haY0FMZWJZRnkrclN5SWgwZm52U1lNK0tJcUxCK0tJUi8zSFg5Wmk3U3k3djVNOUxPYVFBagp3YXI0bFdxZEk5TFdvWllmSmFrSllzelZreDltNUdwSGVDMVlCUzVPTFI2MmRnWG5oVHVBUG1FdGhxRTZyKzNQCkthNGlha3NDbXJWQXA1b0R6OWx4QWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjdYTDEzK2JSMTEKZ21Zem40ZjFoVDU5VlpLSGZ2TEJ3VWF4VGJEV25PZlVrbnFiWHliT1FSVEtGUVBCOXBrM3ZNenAvLzhORXZFVQpoMTBzd00vSmEyT0dzMGh0VUFWRDVBMkpTVmlLeE1RM1puYmRpME5VU1B2cEJCdGFVazRSNWpuYWJkQTZFK3NGClNjQXZPN0U2dGk0UkQzOTJpZ202d3NkdEVENVB5M1QyV2pTZWZHeWFPWUhrSzM3RU9TZXhkdzRJMnJkb2FoRjcKcVVEWnlsdlZSbjRXc1k4QlRJc1Z4REFIOGtqZzNpVVY2UW1Dd0xNL1RSSXNZdDRsRGFwY3BmQW1Lb2Z0S3ZrVgpnR2s5VFFHZ3pnOHptY2JXM011cXRYdGgzVVg4VkgzQmdNeEZ3ais2My84TlBzT0hFUys5NnNNSEk1azFmMDBmClhoSU5yNEhuRC9nPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  defaultKey: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2U3a0RGMGpFWnh5eTcKWmdtNTBwbjloYmVaTnhvOUpKNDNhMHlQeDYyZkdXa2JlQWNIV0N1VTh5MDVHQktmWFBRdGNrdlQ2ZGdNTUN2NwpPcU5UTHVhSlhyc3FiYWJyeHdGZHUrQTlBbENNdjhLUFhrdmNEbnduUlowVW1wNHBEVTUrejVvT1VPSitPcmkrCmJqMXljeGRya0tQR3NPRW95eklVMWZWb2ZONHB2ZnJzTVFZbmd6QnVUdHQ1YzN1Q3c3MDVKL29GaVBrd093WFoKY0FMZWJZRnkrclN5SWgwZm52U1lNK0tJcUxCK0tJUi8zSFg5Wmk3U3k3djVNOUxPYVFBandhcjRsV3FkSTlMVwpvWllmSmFrSllzelZreDltNUdwSGVDMVlCUzVPTFI2MmRnWG5oVHVBUG1FdGhxRTZyKzNQS2E0aWFrc0NtclZBCnA1b0R6OWx4QWdNQkFBRUNnZ0VBTkVSa2x1bytiWnpjTURFcGg2d2tLb1U4VVM0VytmNjk3Ym5pN3ZJYlBsU00KQlpXZXNpS2tDcE5DenlFRWx0WnFFendnaGV2RXVwVnBFWEZDWDB2d1UwTU5TTEhSRUg5ZENxZUw0bVNOZXd4aApmdWJqQ2RiVnE5Q3dEU09nV2gzZkw4TTBoZnJCMGdPYjJEekhCb21sTFNIZlNxdkhFTFJxbndHU2VLK0FITGV5Ck44QnVYSlJhdEVYZnZWcHZPVUZIb1dSL1VYbExZZ3BwNVZEQ3RoNDVEdG5uQkI5a1VLR3BJYVE3dko4RE9UaEoKR2FWYk5OTk5UL0Jqb1ZsRGVQaXNJMHVBQVZ6eGNDWXBlT1hORWFWejhqS1hTUHpydFlYNnR5QytWWWlTRjA4QgpJcDFjTzJrdXVxc25ycXQ4V1ZhcEpGbWcxakRoWTV2WU1UcTJaU3lXUVFLQmdRRFJQeDFiTVNSTFNKczRINW1KCkFYaFk2bW5HbUZHNTNWRnM2RGtkcVA0cEEzNCthdXJ1dld5Visybk9WZEFVNnA4TE5JSm9iUUdKWXhmemNOQzMKUXh0SGhpRnp3cXZUeHljSnlxWWtmT282TCtwSyszQjRhODlPZFJKVFBTZGJ5KzBHWEtqcnNDajJOM1ZEMldXMgpWd0pIdmxqZm8vcE1hbENIWmJiWUNGZlJtUUtCZ1FEQ2NSTXE2S2ZDNjVDOXc2ZmpTQkxhK0R4MjJFTWdjeU9iCjNneEVGdGE2RWJ4cHdrQnoxUXJoQ2JFUFdxL1laalNtd0VoRER4dzU3YTVBNFhXUlVoTTc3STYwVWV1eHBJdWIKZGFHTnlsbE1Zbk1vRXRaSVEwUlU0WXhnc3lDNDBacW9RL2JPaTlGYisvOW5RZXNIT0VKZ0lUS2VBdU9YM3VscAo5SnY2clFkZG1RS0JnQk1pYTJQUWJabzR6SURvV3RqdGVuemZDc2N2WEtIYmZEdXlUSzdLcWx0RHg0S2JzbG9jCmxsWnN4RE1ySTdrVjcyOU40UEw5ck50TVpYOU1mTG1WZUdRay91QWdHQ2hvbU1oTGNMLzdjRXZiMzlmMWdFWnkKeldWR1RXT3hQdTBsQzhxK0pIQlJEcDNkV21yVzhYY29JN3c5eXREQXBQM2g1dlZLdHRxd2dKOVpBb0dBQkxucwo1bGtiWXRDSkJ5UFBXK1h2bDJUN1MwUThkWGgzQUIzb25Hc1ZzeFlsUjBqU2VqNU9jbVBpNnVXZ2Fwa3BaSGcrCkNXcy9tMlRjbkhVZWYzYklRdWVnSEYvMVk2OEZPYlVsUlNZSy82RlEvVU5mOUFlMmpIMmpCT0sxdytoTVl4U3IKMWg5dDZsZDR3TkRJWHJlT1hYblJHaWdsMGhZNEJEeE80a3Y4WnRrQ2dZRUFvYmZvUEw0TzZKbDFBRnMrcUFoZwpTdHAxUDdWYzlHT3BRMytUT2V6U1N5WEtpYzhvLzlqai9UY2tGMlpSUEZndjJsSFFPNzU0LzltU3VrNDV3WTYwCnppbnNSS0JtUWEvR2FYSlRsTDNiWTZVU3Q3ZjNleTVPcmt5UW5YeG9YamFFSE5RRERUOTNoUnE2YklpNkUvMnMKTjZnOHVPUTFjWElQdUpIdTZ3Wk1lMlU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

kvprovider:
  ## If you want to run Traefik in HA mode, you will need to setup a KV Provider. Therefore you can choose one of
  ## * etcd
  ## * consul
  ## * boltdb
  ## * zookeeper
  ##
  ## ref: https://docs.traefik.io/user-guide/cluster/

  ## storeAcme has to be enabled to support HA Support using acme, but at least one kvprovider is needed
  storeAcme: false
  importAcme: false

  # etcd:
    # endpoint: etcd-service:2379
    # useAPIV3: false
    # watch: true
    # prefix: traefik

    ## Override default configuration template.
    ## For advanced users :)
    ##
    ## Optional
    # filename: consul.tmpl
    # username: foo
    # password: bar
    # tls:
    #   ca: "/etc/ssl/ca.crt"
    #   cert: "/etc/ssl/consul.crt"
    #   key: "/etc/ssl/consul.key"
    #   insecureSkipVerify: true
    #
  # consul:
    # endpoint: consul-service:8500
    # watch: true
    # prefix: traefik

    ## Override default configuration template.
    ## For advanced users :)
    ##
    ## Optional
    # filename: consul.tmpl
    # username: foo
    # password: bar
    # tls:
    #   ca: "/etc/ssl/ca.crt"
    #   cert: "/etc/ssl/consul.crt"
    #   key: "/etc/ssl/consul.key"
    #   insecureSkipVerify: true

    ## only relevant for etcd


acme:
  enabled: false
  email: admin@example.com
  staging: true
  logging: false
  # Configure a Let's Encrypt certificate to be managed by default.
  # This is the only way to request wildcard certificates (works only with dns challenge).
  domains:
    enabled: false
    # List of sets of main and (optional) SANs to generate for
    # for wildcard certificates see https://docs.traefik.io/configuration/acme/#wildcard-domains
    domainsList:
      # - main: "*.example.com"
      # - sans:
      #   - "example.com"
      # - main: "*.example2.com"
      # - sans:
      #   - "test1.example2.com"
      #   - "test2.example2.com"
  ## ACME challenge type: "tls-sni-01", "http-01" or "dns-01"
  ## Note the chart's default of tls-sni-01 has been DEPRECATED and (except in
  ## certain circumstances) DISABLED by Let's Encrypt. It remains as a default
  ## value in this chart to preserve legacy behavior and avoid a breaking
  ## change. Users of this chart should strongly consider making the switch to
  ## the dns-01 or http-01 (available since v1.5) challenge.
  challengeType: tls-sni-01
  ## Configure dnsProvider to perform domain verification using dns challenge
  ## Applicable only if using the dns-01 challenge type
  dnsProvider:
    name: nil
    auroradns:
      AURORA_USER_ID: ""
      AURORA_KEY: ""
      AURORA_ENDPOINT: ""
    azure:
      AZURE_CLIENT_ID: ""
      AZURE_CLIENT_SECRET: ""
      AZURE_SUBSCRIPTION_ID: ""
      AZURE_TENANT_ID: ""
      AZURE_RESOURCE_GROUP: ""
    cloudflare:
      CLOUDFLARE_EMAIL: ""
      CLOUDFLARE_API_KEY: ""
    digitalocean:
      DO_AUTH_TOKEN: ""
    dnsimple:
      DNSIMPLE_OAUTH_TOKEN: ""
      DNSIMPLE_BASE_URL: ""
    dnsmadeeasy:
      DNSMADEEASY_API_KEY: ""
      DNSMADEEASY_API_SECRET: ""
      DNSMADEEASY_SANDBOX: ""
    dnspod:
      DNSPOD_API_KEY: ""
    dyn:
      DYN_CUSTOMER_NAME: ""
      DYN_USER_NAME: ""
      DYN_PASSWORD: ""
    exoscale:
      EXOSCALE_API_KEY: ""
      EXOSCALE_API_SECRET: ""
      EXOSCALE_ENDPOINT: ""
    gandi:
      GANDI_API_KEY: ""
    godaddy:
      GODADDY_API_KEY: ""
      GODADDY_API_SECRET: ""
    gcloud:
      GCE_PROJECT: ""
      GCE_SERVICE_ACCOUNT_FILE: ""
    linode:
      LINODE_API_KEY: ""
    namecheap:
      NAMECHEAP_API_USER: ""
      NAMECHEAP_API_KEY: ""
    ns1:
      NS1_API_KEY: ""
    otc:
      OTC_DOMAIN_NAME: ""
      OTC_USER_NAME: ""
      OTC_PASSWORD: ""
      OTC_PROJECT_NAME: ""
      OTC_IDENTITY_ENDPOINT: ""
    pdns:
      PDNS_API_URL: ""
    rackspace:
      RACKSPACE_USER: ""
      RACKSPACE_API_KEY: ""
    rfc2136:
      RFC2136_NAMESERVER: ""
      RFC2136_TSIG_ALGORITHM: ""
      RFC2136_TSIG_KEY: ""
      RFC2136_TSIG_SECRET: ""
      RFC2136_TIMEOUT: ""
    route53:
      AWS_REGION: ""
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
    vultr:
      VULTR_API_KEY: ""
  ## Save ACME certs to a persistent volume. WARNING: If you do not do this, you will re-request
  ## certs every time a pod (re-)starts and you WILL be rate limited!
  persistence:
    enabled: true
    annotations: {}
    ## acme data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 1Gi
    ## A manually managed Persistent Volume Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    ##
    # existingClaim:
dashboard:
  enabled: true
  domain: traefik.localhost
  service: {}
    # annotations:
    #   key: value
  ingress: {}
    # annotations:
    #   key: value
    # labels:
    #   key: value
  auth: {}
    # basic:
    #   username: password
  statistics: {}
    ## Number of recent errors to show in the ‘Health’ tab
    # recentErrors:
service:
  # annotations:
  #   key: value
  # labels:
  #   key: value
  ## Further config for service of type NodePort
  ## Default config with empty string "" will assign a dynamic
  ## nodePort to http and https ports
  nodePorts:
    http: ""
    https: ""
  ## If static nodePort configuration is required it can be enabled as below
  ## Configure ports in allowable range (eg. 30000 - 32767 on minikube)
  # nodePorts:
  #   http: 30080
  #   https: 30443
gzip:
  enabled: true
accessLogs:
  enabled: false
  ## Path to the access logs file. If not provided, Traefik defaults it to stdout.
  # filePath: ""
  format: common  # choices are: common, json
  ## for JSON logging, finer-grained control over what is logged. Fields can be
  ## retained or dropped, and request headers can be retained, dropped or redacted
  fields:
    # choices are keep, drop
    defaultMode: keep
    names: {}
      # ClientUsername: drop
    headers:
      # choices are keep, drop, redact
      defaultMode: keep
      names: {}
        # Authorization: redact
rbac:
  enabled: false
## Enable the /metrics endpoint, for now only supports prometheus
## set to true to enable metric collection by prometheus
metrics:
  prometheus:
    enabled: false
    # buckets: [0.1,0.3,1.2,5]
  datadog:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
  statsd:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
deployment:
  # podAnnotations:
  #   key: value
  hostPort:
    httpEnabled: false
    httpsEnabled: false
    dashboardEnabled: false
sendAnonymousUsage: false
tracing:
  enabled: false
  serviceName: traefik
  # backend: choices are jaeger, zipkin
  # jaeger:
  #   localAgentHostPort: "127.0.0.1:6831"
  #   samplingServerURL: http://localhost:5778/sampling
  #   samplingType: const
  #   samplingParam: 1.0
  # zipkin:
  #   httpEndpoint: http://localhost:9411/api/v1/spans
  #   debug: false
  #   sameSpan: false
  #   id128bit: true
